"""
LangChain-based Quest Generator
–£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangChain –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–∞–º—è—Ç–∏
"""
import json
import os
from typing import Dict, List, Optional, Any
from django.conf import settings

# LangChain imports
try:
    from langchain_core.prompts import ChatPromptTemplate, PromptTemplate
    from langchain_core.output_parsers import JsonOutputParser, PydanticOutputParser
    from langchain_core.runnables import RunnablePassthrough
    from langchain_core.messages import HumanMessage, SystemMessage
    from pydantic import BaseModel, Field
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∞ Mistral –¥–ª—è LangChain
    ChatMistralAI = None
    try:
        from langchain_mistralai import ChatMistralAI
    except ImportError:
        try:
            from langchain.llms import Mistral as ChatMistralAI
        except ImportError:
            pass  # ChatMistralAI –æ—Å—Ç–∞–µ—Ç—Å—è None
    
    LANGCHAIN_AVAILABLE = True
except ImportError as e:
    LANGCHAIN_AVAILABLE = False
    print(f"Warning: LangChain not available: {e}. Using fallback generator.")


class QuestScene(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å—Ü–µ–Ω—ã –∫–≤–µ—Å—Ç–∞"""
    scene_id: str = Field(description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å—Ü–µ–Ω—ã –≤ snake_case —Ñ–æ—Ä–º–∞—Ç–µ")
    text: str = Field(description="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤")
    choices: List[Dict[str, str]] = Field(description="–°–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–æ–≤ –∏–≥—Ä–æ–∫–∞")


class Quest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∫–≤–µ—Å—Ç–∞"""
    scenes: List[QuestScene] = Field(description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ü–µ–Ω –∫–≤–µ—Å—Ç–∞")


class LangChainQuestGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–≤–µ—Å—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangChain"""
    
    def __init__(self):
        self.llm = None
        self.quest_planner = None
        self.quest_creator = None
        self.quest_validator = None
        self.setup_langchain()
    
    def setup_langchain(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LangChain –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        if not LANGCHAIN_AVAILABLE:
            print("LangChain –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        api_key = settings.MISTRAL_API_KEY
        if not api_key or api_key == "your_mistral_api_key_here":
            print("Mistral API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è LangChain")
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
            if ChatMistralAI is None:
                print("ChatMistralAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, LangChain –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")
                return
                
            self.llm = ChatMistralAI(
                model=settings.MISTRAL_MODEL,
                api_key=api_key,
                temperature=0.7,
                max_tokens=100000
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–µ–∫
            self._create_planning_chain()
            self._create_generation_chain()
            self._create_validation_chain()
            
            print("LangChain Quest Generator –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LangChain: {e}")
    
    def _create_planning_chain(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–≤–µ—Å—Ç–∞"""
        planning_prompt = ChatPromptTemplate.from_messages([
            ("system", """–ü–ª–∞–Ω –∫–≤–µ—Å—Ç–∞ –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: 5-10 —Å—Ü–µ–Ω, –º–∏–Ω–∏–º—É–º 1 —Ä–∞–∑–≤–∏–ª–∫–∞, 1 –≤–µ—Ç–≤—å –≥–ª—É–±–∏–Ω–æ–π 3+ —Å—Ü–µ–Ω—ã, –ë–ï–ó –¶–ò–ö–õ–û–í.

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∂–∞–Ω—Ä {genre}, –≥–µ—Ä–æ–π {hero}, —Ü–µ–ª—å {goal}. –°–æ–∑–¥–∞–π –†–û–í–ù–û {scene_count} —Å—Ü–µ–Ω.

–§–æ—Ä–º–∞—Ç:
{{
  "scene_ids": ["start", "choice1", "choice2", "deep_path", "quest_end"],
  "connections": {{
    "start": ["choice1", "choice2"],
    "choice1": ["deep_path"],
    "choice2": ["quest_end"],
    "deep_path": ["quest_end"],
    "quest_end": ["quest_end"]
  }},
  "validation": {{
    "has_quest_end": true,
    "no_cycles": true,
    "scene_count_correct": true
  }}
}}"""),
            ("human", "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –∫–≤–µ—Å—Ç–∞.")
        ])
        
        self.quest_planner = planning_prompt | self.llm | JsonOutputParser()
    
    def _create_generation_chain(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞"""
        generation_prompt = ChatPromptTemplate.from_messages([
            ("system", """–°–æ–∑–¥–∞–π –∫–≤–µ—Å—Ç –¥–ª—è —Ö–∞–∫–∞—Ç–æ–Ω–∞ –ø–æ –ø–ª–∞–Ω—É. –ë–ï–ó –¶–ò–ö–õ–û–í! –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û scene_id –∏–∑ –ø–ª–∞–Ω–∞.

–ü–ª–∞–Ω: {plan}
–ñ–∞–Ω—Ä: {genre}, –ì–µ—Ä–æ–π: {hero}, –¶–µ–ª—å: {goal}

–ü—Ä–∞–≤–∏–ª–∞:
- –ö–∞–∂–¥–∞—è —Å—Ü–µ–Ω–∞ (–∫—Ä–æ–º–µ quest_end) –∏–º–µ–µ—Ç 2+ –≤—ã–±–æ—Ä–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û scene_id –∏–∑ –ø–ª–∞–Ω–∞ –≤ next_scene
- –í—Å–µ –ø—É—Ç–∏ –≤–µ–¥—É—Ç –∫ quest_end
- –ù–ï —Å–æ–∑–¥–∞–≤–∞–π —Ü–∏–∫–ª—ã

JSON —Ñ–æ—Ä–º–∞—Ç:
{{
  "scenes": [
    {{
      "scene_id": "start",
      "text": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
      "choices": [
        {{"text": "–í—ã–±–æ—Ä 1", "next_scene": "scene_–∏–∑_–ø–ª–∞–Ω–∞"}},
        {{"text": "–í—ã–±–æ—Ä 2", "next_scene": "–¥—Ä—É–≥–∞—è_scene_–∏–∑_–ø–ª–∞–Ω–∞"}}
      ]
    }}
  ]
}}"""),
            ("human", "–°–æ–∑–¥–∞–π –∫–≤–µ—Å—Ç.")
        ])
        
        self.quest_creator = generation_prompt | self.llm | JsonOutputParser()
    
    def _create_validation_chain(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–≤–µ—Å—Ç–∞"""
        validation_prompt = ChatPromptTemplate.from_messages([
            ("system", """–ü—Ä–æ–≤–µ—Ä—å –∫–≤–µ—Å—Ç. –û—Ç–≤–µ—á–∞–π JSON.

–ü—Ä–∞–≤–∏–ª–∞:
- –ú–∏–Ω–∏–º—É–º 2 –≤—ã–±–æ—Ä–∞ –≤ —Å—Ü–µ–Ω–µ (–∫—Ä–æ–º–µ quest_end)
- –í—Å–µ next_scene –¥–æ–ª–∂–Ω—ã —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
- –ï—Å—Ç—å quest_end
- –ù–û–†–ú–ê–õ–¨–ù–û: 2+ –≤—ã–±–æ—Ä–æ–≤ –∫ –æ–¥–Ω–æ–π —Å—Ü–µ–Ω–µ

–ö–≤–µ—Å—Ç: {quest}

–§–æ—Ä–º–∞—Ç:
{{
  "valid": true,
  "errors": []
}}"""),
            ("human", "–ü—Ä–æ–≤–µ—Ä—å –∫–≤–µ—Å—Ç.")
        ])
        
        self.quest_validator = validation_prompt | self.llm | JsonOutputParser()
    
    def generate_quest(self, genre: str, hero: str, goal: str, 
                      scene_count: int = 10, max_depth: int = 5, 
                      complexity: str = "medium", ending_type: str = "single") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangChain"""
        
        if not self.llm:
            return {"error": "LangChain –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."}
        
        try:
            print("üß† –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–≤–µ—Å—Ç–∞...")
            
            # –≠—Ç–∞–ø 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            plan_params = {
                "genre": genre,
                "hero": hero,
                "goal": goal,
                "scene_count": scene_count,
                "max_depth": max_depth,
                "complexity": complexity
            }
            
            plan = self.quest_planner.invoke(plan_params)
            print(f"üìã –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(plan.get('scene_ids', []))} —Å—Ü–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∞
            if not plan.get('validation', {}).get('has_quest_end', False):
                return {"error": "–ü–ª–∞–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ü–µ–Ω—É quest_end"}
            
            if not plan.get('validation', {}).get('no_cycles', False):
                return {"error": "–ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏–∫–ª—ã"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω –≤ –ø–ª–∞–Ω–µ
            scene_ids = plan.get('scene_ids', [])
            if len(scene_ids) != scene_count:
                return {"error": f"–ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç {len(scene_ids)} —Å—Ü–µ–Ω, –∞ –Ω—É–∂–Ω–æ {scene_count}"}
            
            print("üéÆ –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–≤–µ—Å—Ç–∞...")
            
            # –≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞ –ø–æ –ø–ª–∞–Ω—É
            generation_params = {
                "plan": json.dumps(plan, ensure_ascii=False),
                "genre": genre,
                "hero": hero,
                "goal": goal,
                "complexity": complexity
            }
            
            quest = self.quest_creator.invoke(generation_params)
            print(f"‚úçÔ∏è –ö–≤–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: {len(quest.get('scenes', []))} —Å—Ü–µ–Ω")
            
            print("üîç –≠—Ç–∞–ø 3: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–≤–µ—Å—Ç–∞...")
            
            # –≠—Ç–∞–ø 3: –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation_params = {
                "quest": json.dumps(quest, ensure_ascii=False)
            }
            
            validation = self.quest_validator.invoke(validation_params)
            
            if not validation.get('valid', False):
                errors = validation.get('errors', [])
                print(f"‚ùå –ö–≤–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {errors}")
                return {"error": f"–ö–≤–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {', '.join(errors)}"}
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ quest_end
            quest_scenes = quest.get('scenes', [])
            quest_end_scene = None
            for scene in quest_scenes:
                if scene.get('scene_id') == 'quest_end':
                    quest_end_scene = scene
                    break
            
            if quest_end_scene:
                choices = quest_end_scene.get('choices', [])
                if not choices:
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º quest_end –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –≤—ã–±–æ—Ä–æ–≤
                    quest_end_scene['choices'] = [{"text": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç", "next_scene": "quest_end"}]
                    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ü–µ–Ω–∞ quest_end - –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä")
            
            print("‚úÖ –ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω!")
            return quest
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ LangChain –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return {"error": f"–û—à–∏–±–∫–∞ LangChain –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"}
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LangChain –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        return LANGCHAIN_AVAILABLE and self.llm is not None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LangChain –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
langchain_generator = LangChainQuestGenerator()